{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishw\\\\Documents\\\\Infosys Internship Project\\\\BATCH-1\\\\BATCH-1_main2 - Copy\\\\Frontend\\\\src\\\\components\\\\EventPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport './events.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventPage = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [userRegistrations, setUserRegistrations] = useState([]); // State for user registrations\n  const [error, setError] = useState('');\n  const [viewCompleted, setViewCompleted] = useState(true); // State to toggle between views\n  const [athleteId, setAthleteId] = useState(null); // State for athlete ID\n  const [formData, setFormData] = useState({\n    title: '',\n    organizer: '',\n    date: '',\n    time: '',\n    fee: '',\n    location: '',\n    imageUrl: ''\n  });\n  const [formMessage, setFormMessage] = useState('');\n  const [userType, setUserType] = useState('');\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check if the user is logged in\n    const loggedIn = sessionStorage.getItem('loggedIn') === 'true';\n    if (!loggedIn) {\n      // Redirect to login page if the user is not logged in\n      navigate('/login');\n    } else {\n      // Fetch athlete ID based on the logged-in username\n      const fetchedUserType = sessionStorage.getItem('userType');\n      setUserType(fetchedUserType || '');\n      const fetchAthleteId = async () => {\n        const username = sessionStorage.getItem('username'); // Get username from sessionStorage\n        const userType = sessionStorage.getItem('userType'); // Get userType from sessionStorage\n        if (username && userType === 'athlete') {\n          try {\n            const response = await axios.get(`http://localhost:8080/api/athletes/${username}`);\n            setAthleteId(response.data.id); // Set athlete ID from response\n          } catch (error) {\n            console.error('Error fetching athlete ID:', error);\n            setError('Failed to fetch athlete ID. Please try again later.');\n          }\n        } else if (!username && userType === 'athlete') {\n          setError('Username not found in session. Please log in again.');\n        }\n      };\n      fetchAthleteId();\n\n      // Fetch events data if the user is logged in\n      const fetchEvents = async () => {\n        try {\n          const response = await axios.get('http://localhost:8080/api/events');\n          setEvents(response.data);\n          console.log('Fetched events:', response.data); // Log the fetched events\n        } catch (error) {\n          console.error('Error fetching events:', error);\n          setError('Failed to fetch events. Please try again later.');\n        }\n      };\n\n      // Fetch user's registrations\n      const fetchUserRegistrations = async () => {\n        if (athleteId) {\n          try {\n            const response = await axios.get(`http://localhost:8080/api/registrations?athleteId=${athleteId}`);\n            console.log('Fetched user registrations:', response.data); // Debugging\n            setUserRegistrations(Array.isArray(response.data) ? response.data : []); // Ensure it's an array\n          } catch (error) {\n            console.error('Error fetching user registrations:', error);\n            setError('Failed to fetch registrations. Please try again later.');\n          }\n        }\n      };\n      fetchEvents();\n      refreshEvents();\n      fetchUserRegistrations();\n    }\n  }, [navigate, athleteId]); // Add athleteId to the dependency array\n\n  // Function to determine if an event is upcoming\n  const isEventUpcoming = eventDate => {\n    const currentDate = new Date().toISOString().split(\"T\")[0];\n    return eventDate >= currentDate; // Compare dates\n  };\n\n  // Filter events based on the view mode\n  const filteredEvents = events.filter(event => viewCompleted ? !isEventUpcoming(event.date) : isEventUpcoming(event.date));\n\n  // Function to check if the user is already registered for the event\n  const isRegistered = eventId => {\n    return Array.isArray(userRegistrations) && userRegistrations.some(registration => registration.eventId === eventId);\n  };\n\n  // Function to fetch user registrations\n  const updateUserRegistrations = async () => {\n    if (athleteId) {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/registrations?athleteId=${athleteId}`);\n        setUserRegistrations(Array.isArray(response.data) ? response.data : []); // Ensure it's an array\n      } catch (error) {\n        console.error('Error fetching user registrations:', error);\n      }\n    }\n  };\n\n  // Function to handle registration\n  const handleRegister = async eventId => {\n    if (isRegistered(eventId)) {\n      //To check user is registered, prevents if already registered\n      window.alert(\"Already registered for the event\");\n      return; // Prevent duplicate registration\n    }\n    const confirmed = window.confirm(\"Are you sure you want to register for this event?\");\n    if (confirmed) {\n      try {\n        // Ensure athleteId is available\n        if (!athleteId) {\n          alert('Athlete ID is not available. Please log in again.');\n          return;\n        }\n        const response = await axios.post('http://localhost:8080/api/registrations', {\n          eventId,\n          athleteId\n        });\n        alert(response.data); // Show success message\n        // Fetch user registrations again to update the state\n        updateUserRegistrations();\n      } catch (error) {\n        alert('Registration failed. Please try again.');\n      }\n    }\n  };\n  const refreshEvents = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/api/events');\n      setEvents(response.data); // Update events state\n    } catch (error) {\n      console.error('Error fetching events:', error);\n      setError('Failed to fetch events. Please try again later.');\n    }\n  };\n  const handleFormChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n  };\n  const handleFormSubmit = async e => {\n    e.preventDefault();\n    try {\n      await axios.post('http://localhost:8080/api/events', formData);\n      setFormMessage('Event created successfully!');\n      setFormData({\n        title: '',\n        organizer: '',\n        date: '',\n        time: '',\n        fee: '',\n        location: '',\n        imageUrl: ''\n      });\n      setEvents([...events, formData]);\n    } catch (error) {\n      console.error('Error creating event:', error); // Log error details\n      setFormMessage('Failed to create event. Please try again.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: viewCompleted ? 'Completed Events' : 'Upcoming Events'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setViewCompleted(!viewCompleted),\n      children: viewCompleted ? 'Show Upcoming Events' : 'Show Completed Events'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-grid\",\n      children: filteredEvents.length > 0 ? filteredEvents.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: event.image_url,\n          alt: event.title,\n          className: \"event-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Game Type: \", event.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Organizer: \", event.organizer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date: \", event.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Time: \", event.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Fee: RS \", event.fee]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Location: \", event.location]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 33\n          }, this), userType === 'athlete' ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"register-button\",\n            onClick: () => handleRegister(event.id),\n            children: \" Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 201,\n            columnNumber: 37\n          }, this) : userType === 'coach' || userType === 'admin' ? /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"view-registrations-button\",\n            onClick: () => window.location.href = '/EventList',\n            children: \" View Event details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 37\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 29\n        }, this)]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No events available at the moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this), (userType === 'coach' || userType === 'admin') && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-form-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Create New Event\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this), formMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: formMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 37\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleFormSubmit,\n        children: [['title', 'organizer', 'date', 'time', 'fee', 'location', 'imageUrl'].map((field, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [field.charAt(0).toUpperCase() + field.slice(1), \":\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: field === 'fee' ? 'number' : field === 'imageUrl' ? 'url' : field === 'date' || field === 'time' ? field : 'text',\n            name: field,\n            value: formData[field],\n            onChange: handleFormChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 33\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 29\n        }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Create Event\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 9\n  }, this);\n};\n_s(EventPage, \"mS/lGksmm2KVsyq6wWTtajFjqGA=\", false, function () {\n  return [useNavigate];\n});\n_c = EventPage;\nexport default EventPage;\nvar _c;\n$RefreshReg$(_c, \"EventPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","jsxDEV","_jsxDEV","EventPage","_s","events","setEvents","userRegistrations","setUserRegistrations","error","setError","viewCompleted","setViewCompleted","athleteId","setAthleteId","formData","setFormData","title","organizer","date","time","fee","location","imageUrl","formMessage","setFormMessage","userType","setUserType","navigate","loggedIn","sessionStorage","getItem","fetchedUserType","fetchAthleteId","username","response","get","data","id","console","fetchEvents","log","fetchUserRegistrations","Array","isArray","refreshEvents","isEventUpcoming","eventDate","currentDate","Date","toISOString","split","filteredEvents","filter","event","isRegistered","eventId","some","registration","updateUserRegistrations","handleRegister","window","alert","confirmed","confirm","post","handleFormChange","e","name","value","target","prevData","handleFormSubmit","preventDefault","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","map","src","image_url","alt","href","onSubmit","field","index","charAt","toUpperCase","slice","type","onChange","required","_c","$RefreshReg$"],"sources":["C:/Users/vishw/Documents/Infosys Internship Project/BATCH-1/BATCH-1_main2 - Copy/Frontend/src/components/EventPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './events.css';\r\n\r\nconst EventPage = () => {\r\n    const [events, setEvents] = useState([]);\r\n    const [userRegistrations, setUserRegistrations] = useState([]); // State for user registrations\r\n    const [error, setError] = useState('');\r\n    const [viewCompleted, setViewCompleted] = useState(true); // State to toggle between views\r\n    const [athleteId, setAthleteId] = useState(null); // State for athlete ID\r\n    const [formData, setFormData] = useState({\r\n        title: '',\r\n        organizer: '',\r\n        date: '',\r\n        time: '',\r\n        fee: '',\r\n        location: '',\r\n        imageUrl: ''\r\n    }); \r\n\r\n    const [formMessage, setFormMessage] = useState('');\r\n    const [userType, setUserType] = useState('');\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        // Check if the user is logged in\r\n        const loggedIn = sessionStorage.getItem('loggedIn') === 'true';\r\n\r\n        if (!loggedIn) {\r\n            // Redirect to login page if the user is not logged in\r\n            navigate('/login');\r\n        } else {\r\n            // Fetch athlete ID based on the logged-in username\r\n            const fetchedUserType = sessionStorage.getItem('userType');\r\n            setUserType(fetchedUserType || '');\r\n\r\n            const fetchAthleteId = async () => {\r\n                const username = sessionStorage.getItem('username'); // Get username from sessionStorage\r\n                const userType = sessionStorage.getItem('userType'); // Get userType from sessionStorage\r\n                if (username && userType==='athlete') {\r\n                    try {\r\n                        const response = await axios.get(`http://localhost:8080/api/athletes/${username}`);\r\n                        setAthleteId(response.data.id); // Set athlete ID from response\r\n                    } catch (error) {\r\n                        console.error('Error fetching athlete ID:', error);\r\n                        setError('Failed to fetch athlete ID. Please try again later.');\r\n                    }\r\n                } else if (!username && userType==='athlete'){\r\n                    setError('Username not found in session. Please log in again.');\r\n                }\r\n            };\r\n\r\n            fetchAthleteId();\r\n\r\n            // Fetch events data if the user is logged in\r\n            const fetchEvents = async () => {\r\n                try {\r\n                    const response = await axios.get('http://localhost:8080/api/events');\r\n                    setEvents(response.data);\r\n                    console.log('Fetched events:', response.data); // Log the fetched events\r\n                } catch (error) {\r\n                    console.error('Error fetching events:', error);\r\n                    setError('Failed to fetch events. Please try again later.');\r\n                }\r\n            };\r\n\r\n            // Fetch user's registrations\r\n            const fetchUserRegistrations = async () => {\r\n                if (athleteId) {\r\n                    try {\r\n                        const response = await axios.get(`http://localhost:8080/api/registrations?athleteId=${athleteId}`);\r\n                        console.log('Fetched user registrations:', response.data); // Debugging\r\n                        setUserRegistrations(Array.isArray(response.data) ? response.data : []); // Ensure it's an array\r\n                    } catch (error) {\r\n                        console.error('Error fetching user registrations:', error);\r\n                        setError('Failed to fetch registrations. Please try again later.');\r\n                    }\r\n                }\r\n            };\r\n\r\n            fetchEvents();\r\n            refreshEvents();\r\n            fetchUserRegistrations();\r\n        }\r\n    }, [navigate, athleteId]); // Add athleteId to the dependency array\r\n\r\n    // Function to determine if an event is upcoming\r\n    const isEventUpcoming = (eventDate) => {\r\n        const currentDate = new Date().toISOString().split(\"T\")[0];\r\n        return eventDate >= currentDate; // Compare dates\r\n    };\r\n\r\n    // Filter events based on the view mode\r\n    const filteredEvents = events.filter(event =>\r\n        viewCompleted ? !isEventUpcoming(event.date) : isEventUpcoming(event.date)\r\n    );\r\n\r\n    // Function to check if the user is already registered for the event\r\n    const isRegistered = (eventId) => {\r\n        return Array.isArray(userRegistrations) && userRegistrations.some(registration => registration.eventId === eventId);\r\n    };\r\n\r\n    // Function to fetch user registrations\r\n    const updateUserRegistrations = async () => {\r\n        if (athleteId) {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/api/registrations?athleteId=${athleteId}`);\r\n                setUserRegistrations(Array.isArray(response.data) ? response.data : []); // Ensure it's an array\r\n            } catch (error) {\r\n                console.error('Error fetching user registrations:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    // Function to handle registration\r\n    const handleRegister = async (eventId) => {\r\n        if (isRegistered(eventId)) {  //To check user is registered, prevents if already registered\r\n            window.alert(\"Already registered for the event\");\r\n            return; // Prevent duplicate registration\r\n        }\r\n        \r\n        const confirmed = window.confirm(\"Are you sure you want to register for this event?\");\r\n        if (confirmed) {\r\n            try {\r\n                // Ensure athleteId is available\r\n                if (!athleteId) {\r\n                    alert('Athlete ID is not available. Please log in again.');\r\n                    return;\r\n                }\r\n\r\n                const response = await axios.post('http://localhost:8080/api/registrations', { eventId, athleteId });\r\n                alert(response.data); // Show success message\r\n                // Fetch user registrations again to update the state\r\n                updateUserRegistrations();\r\n            } catch (error) {\r\n                alert('Registration failed. Please try again.');\r\n            }\r\n        }\r\n    };\r\n\r\n    const refreshEvents = async () => {\r\n        try {\r\n            const response = await axios.get('http://localhost:8080/api/events');\r\n            setEvents(response.data); // Update events state\r\n        } catch (error) {\r\n            console.error('Error fetching events:', error);\r\n            setError('Failed to fetch events. Please try again later.');\r\n        }\r\n    };\r\n\r\n    const handleFormChange = (e) => {\r\n        const { name, value } = e.target;\r\n        setFormData(prevData => ({\r\n            ...prevData,\r\n            [name]: value\r\n        }));\r\n    };\r\n\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n        try {\r\n            await axios.post('http://localhost:8080/api/events', formData);\r\n            setFormMessage('Event created successfully!');\r\n            setFormData({\r\n                title: '',\r\n                organizer: '',\r\n                date: '',\r\n                time: '',\r\n                fee: '',\r\n                location: '',\r\n                imageUrl: ''\r\n            });\r\n            setEvents([...events, formData]);\r\n        } catch (error) {\r\n            console.error('Error creating event:', error);  // Log error details\r\n            setFormMessage('Failed to create event. Please try again.');\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"event-container\">\r\n            <h2>{viewCompleted ? 'Completed Events' : 'Upcoming Events'}</h2>\r\n            <button onClick={() => setViewCompleted(!viewCompleted)}>\r\n                {viewCompleted ? 'Show Upcoming Events' : 'Show Completed Events'}\r\n            </button>\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            <div className=\"event-grid\">\r\n                {filteredEvents.length > 0 ? (\r\n                    filteredEvents.map(event => (\r\n                        <div key={event.id} className=\"event-box\">\r\n                            <img src={event.image_url} alt={event.title} className=\"event-image\" />\r\n                            <div className=\"event-details\">\r\n                                <h2>Game Type: {event.title}</h2>\r\n                                <h3>Organizer: {event.organizer}</h3>\r\n                                <p>Date: {event.date}</p>\r\n                                <p>Time: {event.time}</p>\r\n                                <p>Fee: RS {event.fee}</p>\r\n                                <p>Location: {event.location}</p>\r\n                                {userType === 'athlete' ? (\r\n                                    <button\r\n                                        className=\"register-button\"\r\n                                        onClick={() => handleRegister(event.id)}\r\n                                    > Register\r\n                                    </button>\r\n                                ) : (userType === 'coach' || userType === 'admin') ? (\r\n                                    <button\r\n                                        className=\"view-registrations-button\"\r\n                                        onClick={() => window.location.href='/EventList'}\r\n                                    > View Event details\r\n                                    </button>\r\n                                ) : null }\r\n                            </div>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p>No events available at the moment.</p>\r\n                )}\r\n            </div>\r\n            {(userType === 'coach' || userType === 'admin') && (\r\n                <div className=\"event-form-container\">\r\n                    <h2>Create New Event</h2>\r\n                    {formMessage && <p>{formMessage}</p>}\r\n                    <form onSubmit={handleFormSubmit}>\r\n                        {['title', 'organizer', 'date', 'time', 'fee', 'location', 'imageUrl'].map((field, index) => (\r\n                            <label key={index}>\r\n                                {field.charAt(0).toUpperCase() + field.slice(1)}:\r\n                                <input\r\n                                    type={field === 'fee' ? 'number' : field === 'imageUrl' ? 'url' : field === 'date' || field === 'time' ? field : 'text'}\r\n                                    name={field}\r\n                                    value={formData[field]}\r\n                                    onChange={handleFormChange}\r\n                                    required\r\n                                />\r\n                            </label>\r\n                        ))}\r\n                        <button type=\"submit\">Create Event</button>\r\n                    </form>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}