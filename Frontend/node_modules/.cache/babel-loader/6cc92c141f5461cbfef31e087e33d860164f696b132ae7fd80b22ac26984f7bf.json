{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\vishw\\\\Documents\\\\Infosys Internship Project\\\\BATCH-1\\\\BATCH-1_main2 - Copy\\\\Frontend\\\\src\\\\components\\\\home.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { Link, useNavigate } from 'react-router-dom';\nimport './events.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst HomePage = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [userRegistrations, setUserRegistrations] = useState([]); // State for user registrations\n  const [error, setError] = useState('');\n  const [viewCompleted, setViewCompleted] = useState(false); // State to toggle between views\n  const [athleteId, setAthleteId] = useState(null); // State for athlete ID\n  const navigate = useNavigate();\n  useEffect(() => {\n    const loggedIn = sessionStorage.getItem('loggedIn') === 'true';\n    if (!loggedIn) {\n      navigate('/login');\n    } else {\n      const fetchAthleteId = async () => {\n        const username = sessionStorage.getItem('username'); // Get username from sessionStorage\n        if (username) {\n          try {\n            const response = await axios.get(`http://localhost:8080/api/athletes/${username}`);\n            setAthleteId(response.data.id); // Set athlete ID from response\n          } catch (error) {\n            console.error('Error fetching athlete ID:', error);\n            setError('Failed to fetch athlete ID. Please try again later.');\n          }\n        } else {\n          setError('Username not found in session. Please log in again.');\n        }\n      };\n      fetchAthleteId();\n\n      // Fetch events data\n      const fetchEvents = async () => {\n        try {\n          const response = await axios.get('http://localhost:8080/api/events');\n          setEvents(response.data);\n          console.log('Fetched events:', response.data);\n        } catch (error) {\n          console.error('Error fetching events:', error);\n          setError('Failed to fetch events. Please try again later.');\n        }\n      };\n\n      // Fetch user's registrations\n      const fetchUserRegistrations = async () => {\n        if (athleteId) {\n          try {\n            const response = await axios.get(`http://localhost:8080/api/registrations?athleteId=${athleteId}`);\n            console.log('Fetched user registrations:', response.data); // Debugging\n            setUserRegistrations(Array.isArray(response.data) ? response.data : []); // Ensure it's an array\n          } catch (error) {\n            console.error('Error fetching user registrations:', error);\n            setError('Failed to fetch registrations. Please try again later.');\n          }\n        }\n      };\n      fetchEvents();\n      fetchUserRegistrations();\n    }\n  }, [navigate, athleteId]);\n\n  // Function to determine if an event is upcoming\n  const isEventUpcoming = eventDate => {\n    const currentDate = new Date();\n    const [day, month, year] = eventDate.split('/').map(Number); // Assuming date format is DD/MM/YYYY\n    const eventDateObj = new Date(year, month - 1, day); // Month is 0-indexed\n    return eventDateObj >= currentDate; // Compare dates\n  };\n\n  // Filter events based on the view mode\n  const filteredEvents = events.filter(event => viewCompleted ? !isEventUpcoming(event.date) : isEventUpcoming(event.date));\n\n  // Function to check if the user is already registered for the event\n  const isRegistered = eventId => {\n    return Array.isArray(userRegistrations) && userRegistrations.some(registration => registration.eventId === eventId);\n  };\n\n  // Function to fetch user registrations\n  const updateUserRegistrations = async () => {\n    if (athleteId) {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/registrations?athleteId=${athleteId}`);\n        setUserRegistrations(Array.isArray(response.data) ? response.data : []); // Ensure it's an array\n      } catch (error) {\n        console.error('Error fetching user registrations:', error);\n      }\n    }\n  };\n\n  // Function to handle registration\n  const handleRegister = async eventId => {\n    const confirmed = window.confirm(\"Are you sure you want to register for this event?\");\n    if (confirmed) {\n      try {\n        // Ensure athleteId is available\n        if (!athleteId) {\n          alert('Athlete ID is not available. Please log in again.');\n          return;\n        }\n        const response = await axios.post('http://localhost:8080/api/registrations', {\n          eventId,\n          athleteId\n        });\n        alert(response.data); // Show success message\n        // Fetch user registrations again to update the state\n        updateUserRegistrations();\n      } catch (error) {\n        alert('Registration failed. Please try again.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome to the Athlete's Home Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This is your personal dashboard where you can view your activities, track progress, and much more.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Feel free to explore the various sections of your dashboard.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n_s(HomePage, \"qql/oPUqela6FA9QEUmkEKOsbBE=\", false, function () {\n  return [useNavigate];\n});\n_c = HomePage;\nexport default HomePage;\nvar _c;\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"names":["React","useEffect","useState","axios","Link","useNavigate","jsxDEV","_jsxDEV","HomePage","_s","events","setEvents","userRegistrations","setUserRegistrations","error","setError","viewCompleted","setViewCompleted","athleteId","setAthleteId","navigate","loggedIn","sessionStorage","getItem","fetchAthleteId","username","response","get","data","id","console","fetchEvents","log","fetchUserRegistrations","Array","isArray","isEventUpcoming","eventDate","currentDate","Date","day","month","year","split","map","Number","eventDateObj","filteredEvents","filter","event","date","isRegistered","eventId","some","registration","updateUserRegistrations","handleRegister","confirmed","window","confirm","alert","post","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/vishw/Documents/Infosys Internship Project/BATCH-1/BATCH-1_main2 - Copy/Frontend/src/components/home.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport './events.css';\r\n\r\nconst HomePage = () => {\r\n    const [events, setEvents] = useState([]);\r\n    const [userRegistrations, setUserRegistrations] = useState([]); // State for user registrations\r\n    const [error, setError] = useState('');\r\n    const [viewCompleted, setViewCompleted] = useState(false); // State to toggle between views\r\n    const [athleteId, setAthleteId] = useState(null); // State for athlete ID\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const loggedIn = sessionStorage.getItem('loggedIn') === 'true';\r\n\r\n        if (!loggedIn) {\r\n            navigate('/login');\r\n        } else {\r\n            const fetchAthleteId = async () => {\r\n                const username = sessionStorage.getItem('username'); // Get username from sessionStorage\r\n                if (username) {\r\n                    try {\r\n                        const response = await axios.get(`http://localhost:8080/api/athletes/${username}`);\r\n                        setAthleteId(response.data.id); // Set athlete ID from response\r\n                    } catch (error) {\r\n                        console.error('Error fetching athlete ID:', error);\r\n                        setError('Failed to fetch athlete ID. Please try again later.');\r\n                    }\r\n                } else {\r\n                    setError('Username not found in session. Please log in again.');\r\n                }\r\n            };\r\n\r\n            fetchAthleteId();\r\n\r\n            // Fetch events data\r\n            const fetchEvents = async () => {\r\n                try {\r\n                    const response = await axios.get('http://localhost:8080/api/events');\r\n                    setEvents(response.data);\r\n                    console.log('Fetched events:', response.data);\r\n                } catch (error) {\r\n                    console.error('Error fetching events:', error);\r\n                    setError('Failed to fetch events. Please try again later.');\r\n                }\r\n            };\r\n\r\n            // Fetch user's registrations\r\n            const fetchUserRegistrations = async () => {\r\n                if (athleteId) {\r\n                    try {\r\n                        const response = await axios.get(`http://localhost:8080/api/registrations?athleteId=${athleteId}`);\r\n                        console.log('Fetched user registrations:', response.data); // Debugging\r\n                        setUserRegistrations(Array.isArray(response.data) ? response.data : []); // Ensure it's an array\r\n                    } catch (error) {\r\n                        console.error('Error fetching user registrations:', error);\r\n                        setError('Failed to fetch registrations. Please try again later.');\r\n                    }\r\n                }\r\n            };\r\n\r\n            fetchEvents();\r\n            fetchUserRegistrations();\r\n        }\r\n    }, [navigate, athleteId]);\r\n\r\n    // Function to determine if an event is upcoming\r\n    const isEventUpcoming = (eventDate) => {\r\n        const currentDate = new Date();\r\n        const [day, month, year] = eventDate.split('/').map(Number); // Assuming date format is DD/MM/YYYY\r\n        const eventDateObj = new Date(year, month - 1, day); // Month is 0-indexed\r\n        return eventDateObj >= currentDate; // Compare dates\r\n    };\r\n\r\n    // Filter events based on the view mode\r\n    const filteredEvents = events.filter(event =>\r\n        viewCompleted ? !isEventUpcoming(event.date) : isEventUpcoming(event.date)\r\n    );\r\n\r\n    // Function to check if the user is already registered for the event\r\n    const isRegistered = (eventId) => {\r\n        return Array.isArray(userRegistrations) && userRegistrations.some(registration => registration.eventId === eventId);\r\n    };\r\n\r\n    // Function to fetch user registrations\r\n    const updateUserRegistrations = async () => {\r\n        if (athleteId) {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/api/registrations?athleteId=${athleteId}`);\r\n                setUserRegistrations(Array.isArray(response.data) ? response.data : []); // Ensure it's an array\r\n            } catch (error) {\r\n                console.error('Error fetching user registrations:', error);\r\n            }\r\n        }\r\n    }; \r\n\r\n    // Function to handle registration\r\n    const handleRegister = async (eventId) => {\r\n        const confirmed = window.confirm(\"Are you sure you want to register for this event?\");\r\n        if (confirmed) {\r\n            try {\r\n                // Ensure athleteId is available\r\n                if (!athleteId) {\r\n                    alert('Athlete ID is not available. Please log in again.');\r\n                    return;\r\n                }\r\n\r\n                const response = await axios.post('http://localhost:8080/api/registrations', { eventId, athleteId });\r\n                alert(response.data); // Show success message\r\n                // Fetch user registrations again to update the state\r\n                updateUserRegistrations();\r\n            } catch (error) {\r\n                alert('Registration failed. Please try again.');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h1>Welcome to the Athlete's Home Page</h1>\r\n            <p>This is your personal dashboard where you can view your activities, track progress, and much more.</p>\r\n            <p>Feel free to explore the various sections of your dashboard.</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default HomePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}