{"ast":null,"code":"var _jsxFileName = \"D:\\\\infy\\\\ass3\\\\BATCH-1\\\\Frontend\\\\src\\\\components\\\\EventPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useNavigate } from 'react-router-dom';\nimport './events.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst EventPage = () => {\n  _s();\n  const [events, setEvents] = useState([]);\n  const [error, setError] = useState('');\n  const [viewCompleted, setViewCompleted] = useState(false); // State to toggle between views\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Check if the user is logged in\n    const loggedIn = sessionStorage.getItem('loggedIn') === 'true';\n    if (!loggedIn) {\n      // Redirect to login page if the user is not logged in\n      navigate('/login');\n    } else {\n      // Fetch events data if the user is logged in\n      const fetchEvents = async () => {\n        try {\n          const response = await axios.get('http://localhost:8080/api/events');\n          setEvents(response.data);\n          console.log('Fetched events:', response.data); // Log the fetched events\n        } catch (error) {\n          console.error('Error fetching events:', error);\n          setError('Failed to fetch events. Please try again later.');\n        }\n      };\n      fetchEvents();\n    }\n  }, [navigate]);\n\n  // Function to determine if an event is upcoming\n  const isEventUpcoming = eventDate => {\n    const currentDate = new Date();\n    const [day, month, year] = eventDate.split('/').map(Number); // Assuming date format is DD/MM/YYYY\n    const eventDateObj = new Date(year, month - 1, day); // Month is 0-indexed\n    return eventDateObj >= currentDate; // Compare dates\n  };\n\n  // Filter events based on the view mode\n  const filteredEvents = events.filter(event => viewCompleted ? !isEventUpcoming(event.date) : isEventUpcoming(event.date));\n\n  // Function to handle registration\n  const handleRegister = async eventId => {\n    const confirmed = window.confirm(\"Are you sure you want to register for this event?\");\n    if (confirmed) {\n      try {\n        const athleteId = sessionStorage.getItem('athleteId'); // Assuming you stored athlete ID in sessionStorage\n        const response = await axios.post('http://localhost:8080/api/registrations', {\n          eventId,\n          athleteId\n        });\n        alert(response.data); // Show success message\n      } catch (error) {\n        alert('Registration failed. Please try again.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"event-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: viewCompleted ? 'Completed Events' : 'Upcoming Events'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setViewCompleted(!viewCompleted),\n      children: viewCompleted ? 'Show Upcoming Events' : 'Show Completed Events'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"event-grid\",\n      children: filteredEvents.length > 0 ? filteredEvents.map(event => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"event-box\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: event.image_url,\n          alt: event.title,\n          className: \"event-image\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"event-details\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: [\"Game Type: \", event.title]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Organizer: \", event.organizer]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Date: \", event.date]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Time: \", event.time]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Fee: RS \", event.fee]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [\"Location: \", event.location]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 33\n          }, this), !viewCompleted && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"register-button\",\n            onClick: () => handleRegister(event.id),\n            children: \"Register\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 37\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this)]\n      }, event.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 25\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No events available at the moment.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n};\n_s(EventPage, \"52t0qcvVtGz214GKNZmUg4oCpT0=\", false, function () {\n  return [useNavigate];\n});\n_c = EventPage;\nexport default EventPage;\nvar _c;\n$RefreshReg$(_c, \"EventPage\");","map":{"version":3,"names":["React","useEffect","useState","axios","useNavigate","jsxDEV","_jsxDEV","EventPage","_s","events","setEvents","error","setError","viewCompleted","setViewCompleted","navigate","loggedIn","sessionStorage","getItem","fetchEvents","response","get","data","console","log","isEventUpcoming","eventDate","currentDate","Date","day","month","year","split","map","Number","eventDateObj","filteredEvents","filter","event","date","handleRegister","eventId","confirmed","window","confirm","athleteId","post","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","src","image_url","alt","title","organizer","time","fee","location","id","_c","$RefreshReg$"],"sources":["D:/infy/ass3/BATCH-1/Frontend/src/components/EventPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './events.css';\r\n\r\nconst EventPage = () => {\r\n    const [events, setEvents] = useState([]);\r\n    const [error, setError] = useState('');\r\n    const [viewCompleted, setViewCompleted] = useState(false); // State to toggle between views\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        // Check if the user is logged in\r\n        const loggedIn = sessionStorage.getItem('loggedIn') === 'true';\r\n\r\n        if (!loggedIn) {\r\n            // Redirect to login page if the user is not logged in\r\n            navigate('/login');\r\n        } else {\r\n            // Fetch events data if the user is logged in\r\n            const fetchEvents = async () => {\r\n                try {\r\n                    const response = await axios.get('http://localhost:8080/api/events');\r\n                    setEvents(response.data);\r\n                    console.log('Fetched events:', response.data); // Log the fetched events\r\n                } catch (error) {\r\n                    console.error('Error fetching events:', error);\r\n                    setError('Failed to fetch events. Please try again later.');\r\n                }\r\n            };\r\n            fetchEvents();\r\n        }\r\n    }, [navigate]);\r\n\r\n    // Function to determine if an event is upcoming\r\n    const isEventUpcoming = (eventDate) => {\r\n        const currentDate = new Date();\r\n        const [day, month, year] = eventDate.split('/').map(Number); // Assuming date format is DD/MM/YYYY\r\n        const eventDateObj = new Date(year, month - 1, day); // Month is 0-indexed\r\n        return eventDateObj >= currentDate; // Compare dates\r\n    };\r\n\r\n    // Filter events based on the view mode\r\n    const filteredEvents = events.filter(event =>\r\n        viewCompleted ? !isEventUpcoming(event.date) : isEventUpcoming(event.date)\r\n    );\r\n\r\n    // Function to handle registration\r\n    const handleRegister = async (eventId) => {\r\n        const confirmed = window.confirm(\"Are you sure you want to register for this event?\");\r\n        if (confirmed) {\r\n            try {\r\n                const athleteId = sessionStorage.getItem('athleteId'); // Assuming you stored athlete ID in sessionStorage\r\n                const response = await axios.post('http://localhost:8080/api/registrations', { eventId, athleteId });\r\n                alert(response.data); // Show success message\r\n            } catch (error) {\r\n                alert('Registration failed. Please try again.');\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"event-container\">\r\n            <h2>{viewCompleted ? 'Completed Events' : 'Upcoming Events'}</h2>\r\n            <button onClick={() => setViewCompleted(!viewCompleted)}>\r\n                {viewCompleted ? 'Show Upcoming Events' : 'Show Completed Events'}\r\n            </button>\r\n            {error && <p className=\"error-message\">{error}</p>}\r\n            <div className=\"event-grid\">\r\n                {filteredEvents.length > 0 ? (\r\n                    filteredEvents.map(event => (\r\n                        <div key={event.id} className=\"event-box\">\r\n                            <img src={event.image_url} alt={event.title} className=\"event-image\" />\r\n                            <div className=\"event-details\">\r\n                                <h2>Game Type: {event.title}</h2>\r\n                                <h3>Organizer: {event.organizer}</h3>\r\n                                <p>Date: {event.date}</p>\r\n                                <p>Time: {event.time}</p>\r\n                                <p>Fee: RS {event.fee}</p>\r\n                                <p>Location: {event.location}</p>\r\n                                {/* Conditionally render the Register button only for upcoming events */}\r\n                                {!viewCompleted && (\r\n                                    <button className=\"register-button\" onClick={() => handleRegister(event.id)}>Register</button>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    ))\r\n                ) : (\r\n                    <p>No events available at the moment.</p>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default EventPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}